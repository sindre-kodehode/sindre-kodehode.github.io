#! /usr/bin/env node
"use strict"
import assert from "node:assert"

/*******************************************************************************
*  Given an array of integers, find the one that appears an odd number of      *
*  times. There will always be only one integer that appears an odd number     *
*  of times.                                                                   *
*******************************************************************************/

const findOdd = [
/*******************************************************************************
*  using a Map                                                                 *
*******************************************************************************/
  A => {
    const B = new Map();

    A.forEach( n => {
      B.has( n ) || B.set( n, 0 );
      B.set( n, B.get( n ) + 1 );
    })

    return [ ...B.keys() ].reduce( ( res, k ) =>
      B.get( k ) % 2 === 1 ? k : res
    );
  },

/*******************************************************************************
*  using an object                                                             *
*******************************************************************************/
  A => {
    const B = {};
    A.forEach( a => B[a] ? B[a]++ : B[a] = 1 );
    return +Object.keys( B ).find( a => B[a] % 2 === 1 )
  },

/*******************************************************************************
*  using reduce                                                                *
*******************************************************************************/
  A => +Object.entries( 
    A.reduce( ( acc, n ) => {
      acc[n] ??= 0;
      acc[n]++;
      return acc;
    }, {} )).find( ([ _, v ]) => v % 2 === 1 )[0],

/*******************************************************************************
*  using find and filter                                                       *
*******************************************************************************/
  A => A.find( a => A.filter( b => a === b ).length % 2 === 1 ),

/*******************************************************************************
*  using a single reduce and XOR                                               *
*******************************************************************************/
  A => A.reduce( ( a, b ) => a ^ b ),
];

/*******************************************************************************
*  tests                                                                       *
*******************************************************************************/
const tests = [
  [ [20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5],  5 ],
  [ [1,1,2,-2,5,2,4,4,-1,-2,5]               , -1 ],
  [ [20,1,1,2,2,3,3,5,5,4,20,4,5]            ,  5 ],
  [ [10]                                     , 10 ],
  [ [1,1,1,1,1,1,10,1,1,1,1]                 , 10 ],
  [ [5,4,3,2,1,5,4,3,2,10,10]                ,  1 ],
];

findOdd.forEach( func =>
  tests.forEach( ([ input, expected ]) =>
    assert.strictEqual( func( input ), expected )
));
