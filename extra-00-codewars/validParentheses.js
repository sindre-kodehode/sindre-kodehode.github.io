#! /usr/bin/env node
"use strict"
import assert from "node:assert"

/*******************************************************************************
*  Write a function that takes a string of parentheses, and determines         *
*  if the order of the parentheses is valid. The function should return        *
*  true if the string is valid, and false if it's invalid.                     *
*******************************************************************************/

const validParentheses = [
/*******************************************************************************
*  check the difference of matching ()'s                                       *
*******************************************************************************/
  p => {
    // count number of levels
    let n = 0;

    // loop for each character
    for ( const c of p ) {

      // return false if levels goes below 0
      if ( n < 0 ) return false;

      // increase level
      else if ( c === "(" ) n++;

      // decrese level
      else if ( c === ")" ) n--;
    }

    // return true if not 0
    return !n;
  },

/*******************************************************************************
*  using forEach                                                               *
*******************************************************************************/
  p => {
    let n = 1;
    [ ...p ].forEach( c => n += n ? c === "(" ? 1 : -1 : 0 );
    return n === 1;
  },

/*******************************************************************************
*  using reduce                                                                *
*******************************************************************************/
  p => [ ...p ].reduce( ( n, c ) => n += n ? c === "(" ? 1 : -1 : 0, 1 ) === 1,

/*******************************************************************************
*  remove matching ()'s                                                        *
*******************************************************************************/
  p => {
    while ( p.includes( "()" ) )  // as long as there are matching ()
      p = p.replace( "()", "" );  // remove ()

    return !p;                    // return true if empty string
  },

/*******************************************************************************
*  using recursion                                                             *
*******************************************************************************/
  p => p.includes( "()" ) ? validParentheses[4]( p.replace( "()", "" ) ) : !p,

/*******************************************************************************
*  using reduce                                                                *
*******************************************************************************/
  p => ![ ...p ].reduce( ( a, b ) => ( a + b ).replace( "()", "" ), "" ),

/*******************************************************************************
*  using slice                                                                 *
*******************************************************************************/
  p => ![ ...p ].reduce( ( a, b ) =>
    a.at( -1 ) === "(" && b === ")" ? a.slice( 0, -1 ) : [ ...a, b ]
  , [] ).join``
  ,

];

/*******************************************************************************
*  tests                                                                       *
*******************************************************************************/
const tests = [
  [ [ ""                 ], true  ],
  [ [ "("                ], false ],
  [ [ ")"                ], false ],
  [ [ "()"               ], true  ],
  [ [ "())"              ], false ],
  [ [ "())("             ], false ],
  [ [ "()))"             ], false ],
  [ [ ")()("             ], false ],
  [ [ "(())"             ], true  ],
  [ [ "()()"             ], true  ],
  [ [ "())(()"           ], false ],
  [ [ ")(()))"           ], false ],
  [ [ "(((((((("         ], false ],
  [ [ "(()()))("         ], false ],
  [ [ "()()((()"         ], false ],
  [ [ ")()()()("         ], false ],
  [ [ "()()()())"        ], false ],
  [ [ "((((()))))"       ], true  ],
  [ [ "(()()()())(())"   ], true  ],
  [ [ "(())((()())())"   ], true  ],
  [ [ "(())((()((()))))" ], true  ],

];

validParentheses.forEach( func =>
  tests.forEach( ([ input, expected ]) =>
    assert.strictEqual( func( ...input ), expected )
));
